import * as Location from 'expo-location';

export const geocodingService = {
  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  async requestLocationPermission() {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      return { status };
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return { status: 'denied' };
    }
  },
  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  async addressToCoordinates(address) {
    try {
      if (!address || address.trim() === '') {
        return null;
      }

      console.log('üîç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:', address);
      
      const geocoded = await Location.geocodeAsync(address);
      
      if (geocoded && geocoded.length > 0) {
        const location = geocoded[0];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', location);
        return {
          latitude: location.latitude,
          longitude: location.longitude,
        };
      } else {
        console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return this.getFallbackCoordinates(address);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return this.getFallbackCoordinates(address);
    }
  },

  // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
  getFallbackCoordinates(address) {
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const cityCoordinates = {
      '–º–∏–Ω—Å–∫': { latitude: 53.9045, longitude: 27.5615 },
      '–º–æ—Å–∫–≤–∞': { latitude: 55.7558, longitude: 37.6173 },
      '–∫–∏–µ–≤': { latitude: 50.4501, longitude: 30.5234 },
      '–≤–∞—Ä—à–∞–≤–∞': { latitude: 52.2297, longitude: 21.0122 },
      '–±–µ—Ä–ª–∏–Ω': { latitude: 52.5200, longitude: 13.4050 },
      '–ø–∞—Ä–∏–∂': { latitude: 48.8566, longitude: 2.3522 },
      '–ª–æ–Ω–¥–æ–Ω': { latitude: 51.5074, longitude: -0.1278 },
      '–Ω—å—é-–π–æ—Ä–∫': { latitude: 40.7128, longitude: -74.0060 },
      '—Ç–æ–∫–∏–æ': { latitude: 35.6762, longitude: 139.6503 },
      '–ø–µ–∫–∏–Ω': { latitude: 39.9042, longitude: 116.4074 },
    };

    const lowerAddress = address.toLowerCase();
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    for (const [city, coords] of Object.entries(cityCoordinates)) {
      if (lowerAddress.includes(city)) {
        console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞:', city);
        return coords;
      }
    }

    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
    const hash = address.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    
    // –¶–µ–Ω—Ç—Ä –ï–≤—Ä–æ–ø—ã –∫–∞–∫ –±–∞–∑–∞
    const baseLat = 50.4501;
    const baseLng = 30.5234;
    
    const latOffset = (hash % 100 - 50) / 50; // ¬±1 –≥—Ä–∞–¥—É—Å
    const lngOffset = ((hash * 123) % 100 - 50) / 30; // ¬±1.6 –≥—Ä–∞–¥—É—Å–∞
    
    return {
      latitude: baseLat + latOffset,
      longitude: baseLng + lngOffset,
    };
  },

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å
  async coordinatesToAddress(latitude, longitude) {
    try {
      const address = await Location.reverseGeocodeAsync({
        latitude,
        longitude
      });
      
      if (address && address.length > 0) {
        const firstAddress = address[0];
        const parts = [];
        
        if (firstAddress.street) parts.push(firstAddress.street);
        if (firstAddress.city) parts.push(firstAddress.city);
        if (firstAddress.region) parts.push(firstAddress.region);
        if (firstAddress.country) parts.push(firstAddress.country);
        
        return parts.join(', ');
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
    
    return `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentLocation() {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
        return null;
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      });

      return {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      };
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }
};